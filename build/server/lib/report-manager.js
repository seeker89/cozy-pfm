// Generated by CoffeeScript 1.6.2
var BankAccount, BankAlert, BankOperation, Client, ReportManager, jade, moment;

moment = require('moment');

Client = require('request-json').JsonClient;

jade = require('jade');

BankAlert = require('../models/bankalert');

BankOperation = require('../models/bankoperation');

BankAccount = require('../models/bankaccount');

ReportManager = (function() {
  function ReportManager() {
    var _ref;

    this.client = new Client("http://localhost:9101/");
    if ((_ref = process.env.NODE_ENV) === "production" || _ref === "test") {
      this.client.setBasicAuth(process.env.NAME, process.env.TOKEN);
    }
  }

  ReportManager.prototype.start = function() {
    return this.prepareNextCheck();
  };

  ReportManager.prototype.prepareNextCheck = function() {
    var delta, format, nextUpdate, now,
      _this = this;

    delta = Math.floor(Math.random() * 120);
    now = moment();
    nextUpdate = now.clone().add(1, 'days').hours(2).minutes(delta).seconds(0);
    format = "DD/MM/YYYY [at] HH:mm:ss";
    console.log("> Next check to send report " + (nextUpdate.format(format)));
    return this.timeout = setTimeout(function() {
      return _this.manageReports();
    }, nextUpdate.diff(now));
  };

  ReportManager.prototype.manageReports = function() {
    var now;

    now = moment();
    this.prepareReport('daily');
    if (now.day() === 1) {
      this.prepareReport('weekly');
    }
    if (now.date() === 1) {
      this.prepareReport('monthly');
    }
    return this.prepareNextCheck();
  };

  ReportManager.prototype.prepareReport = function(frequency) {
    var _this = this;

    console.log("Checking if user has enabled " + frequency + " report...");
    return BankAlert.allReportsByFrequency(frequency, function(err, alerts) {
      var alert, includedBankAccounts, msg, _i, _len;

      if (err != null) {
        msg = "Couldn't retrieve alerts -- " + err;
        console.log(msg);
        return callback(msg);
      } else {
        includedBankAccounts = [];
        for (_i = 0, _len = alerts.length; _i < _len; _i++) {
          alert = alerts[_i];
          includedBankAccounts.push(alert.bankAccount);
        }
        if (alerts.length > 0) {
          return _this._prepareOperationsData(frequency, includedBankAccounts, function(err, operationsByAccount) {
            return _this._prepareBalancesData(frequency, includedBankAccounts, function(err, accounts) {
              var htmlContent, textContent;

              if (accounts.length > 0) {
                textContent = _this._getTextContent(operationsByAccount, accounts, frequency);
                htmlContent = _this._getHtmlContent(operationsByAccount, accounts, frequency);
                return _this._sendReport(frequency, textContent, htmlContent);
              }
            });
          });
        } else {
          return console.log("User hasn't enabled " + frequency + " report.");
        }
      }
    });
  };

  ReportManager.prototype._prepareBalancesData = function(frequency, accounts, callback) {
    return BankAccount.findMany(accounts, function(err, accounts) {
      var msg;

      if (err != null) {
        msg = "Couldn't retrieve accounts -- " + err;
        console.log(msg);
        return callback(msg);
      } else {
        return callback(null, accounts);
      }
    });
  };

  ReportManager.prototype._prepareOperationsData = function(frequency, accounts, callback) {
    var _this = this;

    return BankOperation.allFromBankAccount(accounts, function(err, operations) {
      var account, date, msg, operation, operationsByAccount, timeFrame, _i, _len;

      if (err != null) {
        msg = "Couldn't retrieve operations -- " + err;
        console.log(msg);
        return callback(msg);
      } else {
        operationsByAccount = {};
        timeFrame = _this._getTimeFrame(frequency);
        for (_i = 0, _len = operations.length; _i < _len; _i++) {
          operation = operations[_i];
          account = operation.bankAccount;
          if (operation.dateImport) {
            date = operation.dateImport;
          } else {
            date = operation.date;
          }
          if (moment(date).isAfter(timeFrame)) {
            if (operationsByAccount[account] == null) {
              operationsByAccount[account] = [];
            }
            operationsByAccount[account].push(operation);
          }
        }
        return callback(null, operationsByAccount);
      }
    });
  };

  ReportManager.prototype._sendReport = function(frequency, textContent, htmlContent) {
    var data;

    data = {
      from: "Cozy PFM <pfm-noreply@cozycloud.cc>",
      subject: "[Cozy-PFM] " + frequency + " report",
      content: textContent,
      html: htmlContent
    };
    return this.client.post("mail/to-user/", data, function(err, res, body) {
      var msg;

      if (err != null) {
        msg = "An error occurred while sending an email";
        console.log("" + msg + " -- " + err);
        if (res != null) {
          return console.log(res.statusCode);
        }
      } else {
        return console.log("Report sent.");
      }
    });
  };

  ReportManager.prototype._getTextContent = function(operationsByAccount, accounts, frequency) {
    var account, lastCheck, operation, operations, output, today, _i, _j, _len, _len1;

    today = moment().format("DD/MM/YYYY");
    output = "Votre rapport bancaire du " + today + "\n\n";
    output += "Solde de vos comptes :\n";
    for (_i = 0, _len = accounts.length; _i < _len; _i++) {
      account = accounts[_i];
      lastCheck = moment(account.lastCheck).format("DD/MM/YYYY");
      output += ("\t* " + account.accountNumber + " (" + account.title + ") ") + ("# " + (account.getBalance()) + "€ ") + ("(Dernière vérification : " + lastCheck + ")\n");
    }
    if (Object.keys(operationsByAccount).length > 0) {
      output += "\nNouvelles opérations importées :\n";
      for (account in operationsByAccount) {
        operations = operationsByAccount[account];
        output += "Compte n°" + account + "\n";
        for (_j = 0, _len1 = operations.length; _j < _len1; _j++) {
          operation = operations[_j];
          output += ("\t* " + operation.title + " # " + operation.amount + "€") + (" # (" + (moment(operation.date).format("DD/MM/YYYY")) + ")\n");
        }
      }
    } else {
      output = "Aucune nouvelle opération n'a été importée " + frequency + ".";
    }
    return output;
  };

  ReportManager.prototype._getHtmlContent = function(operationsByAccount, accounts, frequency) {
    var options, today;

    today = moment().format("DD/MM/YYYY");
    options = {
      today: today,
      accounts: accounts,
      operationsByAccount: operationsByAccount
    };
    return jade.renderFile('./server/views/mail-report.jade', options);
  };

  ReportManager.prototype._getTimeFrame = function(frequency) {
    var timeFrame;

    timeFrame = moment();
    switch (frequency) {
      case "daily":
        return timeFrame.subtract("days", 1).hours(0).minutes(0).seconds(0);
      case "weekly":
        return timeFrame.subtract("days", 7).hours(0).minutes(0).seconds(0);
      case "monthly":
        return timeFrame.subtract("months", 1).days(0).hours(0).minutes(0).seconds(0);
    }
  };

  return ReportManager;

})();

module.exports = new ReportManager();
