// Generated by CoffeeScript 1.6.2
var client, fixtures, helpers, path, should;

should = require('should');

path = require('path');

fixtures = require('cozy-fixtures');

fixtures.setDefaultValues({
  dirPath: path.resolve(__dirname, '../fixtures/'),
  silent: true,
  removeBeforeLoad: false
});

helpers = require('../helpers');

client = helpers.getClient();

describe("Bank Accesses Controller", function() {
  before(helpers.cleanDBWithRequests);
  before(helpers.startApp);
  after(helpers.stopApp);
  after(helpers.cleanDBWithRequests);
  return describe("When I add bank accesses", function() {
    before(helpers.cleanDB);
    before(function(done) {
      return fixtures.load({
        doctypeTarget: 'BankAccess',
        callback: done
      });
    });
    after(helpers.cleanDB);
    describe("When I GET /bankaccesses", function() {
      var _this = this;

      this.err = null;
      this.res = null;
      this.body = null;
      before(function(done) {
        return client.get('bankaccesses', function(err, res, body) {
          _this.err = err;
          _this.res = res;
          _this.body = body;
          return done();
        });
      });
      it("The response should be a success", function() {
        should.not.exist(_this.err);
        should.exist(_this.res);
        should.exist(_this.body);
        _this.res.should.have.property('statusCode');
        _this.res.statusCode.should.equal(200);
        return _this.body.should.be.an.Array;
      });
      return it.skip("And there should be 4 bank accesses with an ID, a bank, a login and a password", function() {
        var bankAccess, _i, _len, _ref, _results;

        _this.body.length.should.equal(4);
        _ref = _this.body.length;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          bankAccess = _ref[_i];
          _results.push(bankAccess.should.have.properties(['id', 'bank', 'login', 'password']));
        }
        return _results;
      });
    });
    describe.skip("When I GET /bankaccesses/:bankAccessID with an existing ID", function() {
      var _this = this;

      this.err = null;
      this.res = null;
      this.body = null;
      this.expectedBody = null;
      before(function(done) {
        return client.get('bankaccesses', function(err, res, body) {
          _this.expectedBody = body[0];
          return client.get("bankaccesses/" + _this.expectedBody.id, function(err, res, body) {
            _this.err = err;
            _this.res = res;
            _this.body = body;
            return done();
          });
        });
      });
      it("The response should be a success", function() {
        should.not.exist(_this.err);
        should.exist(_this.res);
        should.exist(_this.body);
        _this.res.should.have.property('statusCode');
        _this.res.statusCode.should.equal(200);
        return _this.body.should.be.an.Object;
      });
      it("And the body should have ID, name and uuid properties", function() {
        return _this.body.should.have.properties(['id', 'name', 'uuid']);
      });
      return it("And the body should be the same than the one in the list", function() {
        _this.body.id.should.equal(_this.expectedBody.id);
        _this.body.name.should.equal(_this.expectedBody.name);
        return _this.body.uuid.should.equal(_this.expectedBody.uuid);
      });
    });
    describe("When I GET /bankaccesses/:bankAccessID with an unknown ID", function() {
      var _this = this;

      this.err = null;
      this.res = null;
      this.body = null;
      before(function(done) {
        return client.get("bankaccesses/123", function(err, res, body) {
          _this.err = err;
          _this.res = res;
          _this.body = body;
          return done();
        });
      });
      return it("The response should be an error", function() {
        should.not.exist(_this.err);
        should.exist(_this.res);
        should.exist(_this.body);
        _this.res.should.have.property('statusCode');
        _this.res.statusCode.should.equal(404);
        return _this.body.should.have.property('error');
      });
    });
    describe.skip("When I POST /bankaccesses", function() {
      it("The response should be a success");
      return it("And the bank access should be in the database");
    });
    describe.skip("When I PUT /bankaccesses/:bankAccessID", function() {
      it("The response should be a success");
      return it("And the bank access should be updated in the database");
    });
    describe.skip("When I DELETE /bankaccesses/:bankAccessID", function() {
      it("The response should be a success");
      it("And the bank access shouldn't be in the database anymore");
      it("And the bank access' accounts shouldn't be in the database anymore");
      return it("And the bank access' operations shouldn't be in the database anymore");
    });
    return describe.skip("When I GET /bankaccesses/getAccounts/:bankAccessID", function() {
      it("The response should be a success");
      return it("And there should be x bank accounts in the body");
    });
  });
});
